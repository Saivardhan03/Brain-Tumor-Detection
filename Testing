model_path = "brain_tumor_detection_model.h5"
model.save(model_path)
print(f"Model saved to {model_path}")

from tensorflow.keras.models import load_model
model = load_model("brain_tumor_detection_model.h5")

def preprocess_image(image_path):
    # Read the image
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    if img is None:
        raise ValueError(f"Could not read image at {image_path}")

    # Resize to match model input
    img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))

    # Normalize
    img = img / 255.0

    # Apply CLAHE enhancement
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
    img = clahe.apply((img * 255).astype(np.uint8)) / 255.0

    # Reshape for model input (add batch and channel dimensions)
    img = img.reshape(1, IMG_SIZE, IMG_SIZE, 1)

    return img

# Function to make prediction
def predict_tumor(image_path):
    # Preprocess the image
    processed_image = preprocess_image(image_path)

    # Make prediction
    prediction = model.predict(processed_image)[0][0]

    # Interpret results
    result = "Tumor detected" if prediction > 0.5 else "No tumor detected"
    confidence = prediction if prediction > 0.5 else 1 - prediction

    return result, confidence

# Example usage
def test_model_with_image(image_path):
    try:
        result, confidence = predict_tumor(image_path)
        print(f"Prediction: {result}")
        print(f"Confidence: {confidence:.2%}")

        # Display the image with prediction
        img = cv2.imread(image_path)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        plt.figure(figsize=(6, 6))
        plt.imshow(img)
        plt.title(f"Prediction: {result} (Confidence: {confidence:.2%})")
        plt.axis('off')
        plt.show()

    except Exception as e:
        print(f"Error processing image: {e}")

# Test the model with a specific image
# Replace 'path_to_your_test_image.jpg' with your actual image path
test_image_path = "/content/Dataset/no/123.jpg"
test_model_with_image(test_image_path)
